=========================================================
ðŸ“˜ JavaScript â€” Comparison & Logical Operators (Quick Revision)
=========================================================

Comparison Operators:
- ==   Loose equality (type-converts before comparing)
- ===  Strict equality (no type conversion)
- !=   Loose inequality
- !==  Strict inequality
- >, <, >=, <=  Relational comparisons (numbers/String lexicographically)

Type Coercion Summary:
- `"2" == 2` â†’ true; `"2" === 2` â†’ false
- With `==`, JS attempts conversions: empty string â†’ 0, etc.
- Prefer `===` to avoid surprises.

Special Cases:
- `null == undefined` â†’ true; `null === undefined` â†’ false
- Objects compared by reference:
  `{a:1} === {a:1}` â†’ false; same object reference â†’ true

Logical Operators (return value, not boolean):
- `&&` â†’ returns first falsy value or last value
- `||` â†’ returns first truthy value or last value
- `!` â†’ boolean negation

Examples:
- `x == y`  // loose equality
- `x === y` // strict equality
- `"5" > "12"` â†’ true (string comparison)
- `0 == false` â†’ true; `0 === false` â†’ false
- `null < 1` â†’ true (null â†’ 0)
- `undefined < 1` â†’ false (undefined â†’ NaN)
- `a || b` returns a if truthy else b
- `a && b` returns a if falsy else b
- `!value` converts to boolean and negates

=========================================================
